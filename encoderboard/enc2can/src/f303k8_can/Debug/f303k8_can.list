
f303k8_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b6c  08002b6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b6c  08002b6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b6c  08002b6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002b80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002b80  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014c3  00000000  00000000  00028029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  000294f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019d6f  00000000  00000000  0002a418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006716  00000000  00000000  00044187  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099403  00000000  00000000  0004a89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3ca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  000e3d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b1c 	.word	0x08002b1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b1c 	.word	0x08002b1c

080001c8 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80001d6:	f107 010c 	add.w	r1, r7, #12
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	2201      	movs	r2, #1
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <uart_putc+0x28>)
 80001e2:	f002 f93b 	bl	800245c <HAL_UART_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000060 	.word	0x20000060

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 80001f8:	4b2b      	ldr	r3, [pc, #172]	; (80002a8 <main+0xb4>)
 80001fa:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <main+0xb8>)
 80001fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fa4b 	bl	8000698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f85f 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f905 	bl	8000414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800020a:	f000 f8d3 	bl	80003b4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800020e:	f000 f89b 	bl	8000348 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000212:	4827      	ldr	r0, [pc, #156]	; (80002b0 <main+0xbc>)
 8000214:	f000 fbc3 	bl	800099e <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000218:	2102      	movs	r1, #2
 800021a:	4825      	ldr	r0, [pc, #148]	; (80002b0 <main+0xbc>)
 800021c:	f000 fd13 	bl	8000c46 <HAL_CAN_ActivateNotification>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <main+0x36>
   {

     Error_Handler();
 8000226:	f000 f919 	bl	800045c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxHeader.StdId = 0x123;
 800022a:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <main+0xc0>)
 800022c:	f240 1223 	movw	r2, #291	; 0x123
 8000230:	601a      	str	r2, [r3, #0]
	  	  	  TxHeader.RTR = CAN_RTR_DATA;
 8000232:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <main+0xc0>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
	  	  	  TxHeader.IDE = CAN_ID_STD;
 8000238:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <main+0xc0>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
	  	  	  TxHeader.DLC = 8;
 800023e:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <main+0xc0>)
 8000240:	2208      	movs	r2, #8
 8000242:	611a      	str	r2, [r3, #16]
	  	  	  TxHeader.TransmitGlobalTime = DISABLE;
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <main+0xc0>)
 8000246:	2200      	movs	r2, #0
 8000248:	751a      	strb	r2, [r3, #20]
	  	  	  TxData[0] = 100;
 800024a:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <main+0xc4>)
 800024c:	2264      	movs	r2, #100	; 0x64
 800024e:	701a      	strb	r2, [r3, #0]
	  	  	  TxData[1] = 200;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0xc4>)
 8000252:	22c8      	movs	r2, #200	; 0xc8
 8000254:	705a      	strb	r2, [r3, #1]
	  	  	  TxData[2] = cnt;
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0xc8>)
 8000258:	781a      	ldrb	r2, [r3, #0]
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <main+0xc4>)
 800025c:	709a      	strb	r2, [r3, #2]

	  	  	  /* Request transmission */
	  	  	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xcc>)
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <main+0xc4>)
 8000262:	4914      	ldr	r1, [pc, #80]	; (80002b4 <main+0xc0>)
 8000264:	4812      	ldr	r0, [pc, #72]	; (80002b0 <main+0xbc>)
 8000266:	f000 fbde 	bl	8000a26 <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0x80>
	  	  	  {
	  	  	    /* Transmission request Error */
	  	  	    Error_Handler();
 8000270:	f000 f8f4 	bl	800045c <Error_Handler>
	  	  	  }
	  	  	  HAL_Delay(10);
 8000274:	200a      	movs	r0, #10
 8000276:	f000 fa75 	bl	8000764 <HAL_Delay>
	  	  	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {}
 800027a:	bf00      	nop
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0xbc>)
 800027e:	f000 fcad 	bl	8000bdc <HAL_CAN_GetTxMailboxesFreeLevel>
 8000282:	4603      	mov	r3, r0
 8000284:	2b03      	cmp	r3, #3
 8000286:	d1f9      	bne.n	800027c <main+0x88>

	  	  	   if(cnt>250){
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <main+0xc8>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2bfa      	cmp	r3, #250	; 0xfa
 800028e:	d903      	bls.n	8000298 <main+0xa4>
	  	  		   cnt=0;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <main+0xc8>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	e7c8      	b.n	800022a <main+0x36>
	  	  	   }
	  	  	   else{
	  	  		   cnt++;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0xc8>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <main+0xc8>)
 80002a2:	701a      	strb	r2, [r3, #0]
	  TxHeader.StdId = 0x123;
 80002a4:	e7c1      	b.n	800022a <main+0x36>
 80002a6:	bf00      	nop
 80002a8:	20000100 	.word	0x20000100
 80002ac:	080001c9 	.word	0x080001c9
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	200000e4 	.word	0x200000e4
 80002b8:	20000054 	.word	0x20000054
 80002bc:	20000028 	.word	0x20000028
 80002c0:	2000005c 	.word	0x2000005c

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fc1a 	bl	8002b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f000 ff1d 	bl	8001144 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f000 f8a4 	bl	800045c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fe10 	bl	8001f54 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f88f 	bl	800045c <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_CAN_Init+0x64>)
 800034e:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_CAN_Init+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_CAN_Init+0x64>)
 8000354:	2202      	movs	r2, #2
 8000356:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_CAN_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_CAN_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_CAN_Init+0x64>)
 8000366:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800036a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_CAN_Init+0x64>)
 800036e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000372:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <MX_CAN_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_CAN_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_CAN_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_CAN_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <MX_CAN_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_CAN_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_CAN_Init+0x64>)
 800039a:	f000 fa05 	bl	80007a8 <HAL_CAN_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003a4:	f000 f85a 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000002c 	.word	0x2000002c
 80003b0:	40006400 	.word	0x40006400

080003b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <MX_USART2_UART_Init+0x5c>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003f8:	f001 ffe2 	bl	80023c0 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000402:	f000 f82b 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000060 	.word	0x20000060
 8000410:	40004400 	.word	0x40004400

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_GPIO_Init+0x44>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <MX_GPIO_Init+0x44>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_GPIO_Init+0x44>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_GPIO_Init+0x44>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <MX_GPIO_Init+0x44>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_GPIO_Init+0x44>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <HAL_CAN_MspInit+0x80>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d129      	bne.n	800052a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_CAN_MspInit+0x84>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000506:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000514:	2303      	movs	r3, #3
 8000516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000518:	2309      	movs	r3, #9
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fc9b 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	; 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40006400 	.word	0x40006400
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a18      	ldr	r2, [pc, #96]	; (80005bc <HAL_UART_MspInit+0x80>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d129      	bne.n	80005b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <HAL_UART_MspInit+0x84>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <HAL_UART_MspInit+0x84>)
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_UART_MspInit+0x84>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_UART_MspInit+0x84>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <HAL_UART_MspInit+0x84>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_UART_MspInit+0x84>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800058e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a0:	2307      	movs	r3, #7
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f000 fc57 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	; 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40004400 	.word	0x40004400
 80005c0:	40021000 	.word	0x40021000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <MemManage_Handler+0x4>

080005de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f884 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <SystemInit+0x20>)
 8000626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <SystemInit+0x20>)
 800062c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800067c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0b      	ldr	r4, [pc, #44]	; (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066e:	f7ff ffd7 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000672:	f002 fa27 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000676:	f7ff fdbd 	bl	80001f4 <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000688:	08002b74 	.word	0x08002b74
  ldr r2, =_sbss
 800068c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000690:	20000108 	.word	0x20000108

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_Init+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_Init+0x28>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 fba5 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f808 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b4:	f7ff feda 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x54>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x58>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fbaf 	bl	8000e46 <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00e      	b.n	8000710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d80a      	bhi.n	800070e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f8:	2200      	movs	r2, #0
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f000 fb85 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_InitTick+0x5c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000000 	.word	0x20000000
 800071c:	20000008 	.word	0x20000008
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x20>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x24>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_IncTick+0x24>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	20000104 	.word	0x20000104

0800074c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000104 	.word	0x20000104

08000764 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff ffee 	bl	800074c <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_Delay+0x40>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffde 	bl	800074c <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000008 	.word	0x20000008

080007a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e0ed      	b.n	8000996 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d102      	bne.n	80007cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fe74 	bl	80004b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 0202 	bic.w	r2, r2, #2
 80007da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007dc:	f7ff ffb6 	bl	800074c <HAL_GetTick>
 80007e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007e2:	e012      	b.n	800080a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007e4:	f7ff ffb2 	bl	800074c <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b0a      	cmp	r3, #10
 80007f0:	d90b      	bls.n	800080a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2205      	movs	r2, #5
 8000802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e0c5      	b.n	8000996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1e5      	bne.n	80007e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000828:	f7ff ff90 	bl	800074c <HAL_GetTick>
 800082c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800082e:	e012      	b.n	8000856 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000830:	f7ff ff8c 	bl	800074c <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b0a      	cmp	r3, #10
 800083c:	d90b      	bls.n	8000856 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2205      	movs	r2, #5
 800084e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e09f      	b.n	8000996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0e5      	beq.n	8000830 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7e1b      	ldrb	r3, [r3, #24]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d108      	bne.n	800087e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e007      	b.n	800088e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7e5b      	ldrb	r3, [r3, #25]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7e9b      	ldrb	r3, [r3, #26]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d108      	bne.n	80008d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f042 0220 	orr.w	r2, r2, #32
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 0220 	bic.w	r2, r2, #32
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7edb      	ldrb	r3, [r3, #27]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d108      	bne.n	80008fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f022 0210 	bic.w	r2, r2, #16
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e007      	b.n	800090c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f042 0210 	orr.w	r2, r2, #16
 800090a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7f1b      	ldrb	r3, [r3, #28]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d108      	bne.n	8000926 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0208 	orr.w	r2, r2, #8
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	e007      	b.n	8000936 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 0208 	bic.w	r2, r2, #8
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7f5b      	ldrb	r3, [r3, #29]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d108      	bne.n	8000950 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f042 0204 	orr.w	r2, r2, #4
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e007      	b.n	8000960 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0204 	bic.w	r2, r2, #4
 800095e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	431a      	orrs	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	ea42 0103 	orr.w	r1, r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d12e      	bne.n	8000a10 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2202      	movs	r2, #2
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0201 	bic.w	r2, r2, #1
 80009c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009ca:	f7ff febf 	bl	800074c <HAL_GetTick>
 80009ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009d0:	e012      	b.n	80009f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d2:	f7ff febb 	bl	800074c <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	2b0a      	cmp	r3, #10
 80009de:	d90b      	bls.n	80009f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2205      	movs	r2, #5
 80009f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e012      	b.n	8000a1e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e5      	bne.n	80009d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e006      	b.n	8000a1e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
  }
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b089      	sub	sp, #36	; 0x24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d003      	beq.n	8000a52 <HAL_CAN_AddTxMessage+0x2c>
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	f040 80b8 	bne.w	8000bc2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10a      	bne.n	8000a72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d105      	bne.n	8000a72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 80a0 	beq.w	8000bb2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	0e1b      	lsrs	r3, r3, #24
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d907      	bls.n	8000a92 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e09e      	b.n	8000bd0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a92:	2201      	movs	r2, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10d      	bne.n	8000ac0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	6809      	ldr	r1, [r1, #0]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3318      	adds	r3, #24
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	440b      	add	r3, r1
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	e00f      	b.n	8000ae0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000aca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad0:	68f9      	ldr	r1, [r7, #12]
 8000ad2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ad4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	440b      	add	r3, r1
 8000ade:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3318      	adds	r3, #24
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	440b      	add	r3, r1
 8000af0:	3304      	adds	r3, #4
 8000af2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	7d1b      	ldrb	r3, [r3, #20]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d111      	bne.n	8000b20 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3318      	adds	r3, #24
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	4413      	add	r3, r2
 8000b08:	3304      	adds	r3, #4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	6811      	ldr	r1, [r2, #0]
 8000b10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3318      	adds	r3, #24
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3307      	adds	r3, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	061a      	lsls	r2, r3, #24
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	041b      	lsls	r3, r3, #16
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3305      	adds	r3, #5
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	3204      	adds	r2, #4
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	4610      	mov	r0, r2
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	6811      	ldr	r1, [r2, #0]
 8000b48:	ea43 0200 	orr.w	r2, r3, r0
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	440b      	add	r3, r1
 8000b52:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	061a      	lsls	r2, r3, #24
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3302      	adds	r3, #2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4313      	orrs	r3, r2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	4610      	mov	r0, r2
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	6811      	ldr	r1, [r2, #0]
 8000b7e:	ea43 0200 	orr.w	r2, r3, r0
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	440b      	add	r3, r1
 8000b88:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3318      	adds	r3, #24
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	4413      	add	r3, r2
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	6811      	ldr	r1, [r2, #0]
 8000ba0:	f043 0201 	orr.w	r2, r3, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	440b      	add	r3, r1
 8000bac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e00e      	b.n	8000bd0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e006      	b.n	8000bd0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
  }
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3724      	adds	r7, #36	; 0x24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bee:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d002      	beq.n	8000bfc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000bf6:	7afb      	ldrb	r3, [r7, #11]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d11d      	bne.n	8000c38 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d002      	beq.n	8000c64 <HAL_CAN_ActivateNotification+0x1e>
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d109      	bne.n	8000c78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6959      	ldr	r1, [r3, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	e006      	b.n	8000c86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
  }
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff47 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff5c 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb0 	bl	8000db4 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	e14e      	b.n	800110e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 8140 	beq.w	8001108 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d00b      	beq.n	8000ea8 <HAL_GPIO_Init+0x48>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	2b11      	cmp	r3, #17
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0xea>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 809a 	beq.w	8001108 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	4b55      	ldr	r3, [pc, #340]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a54      	ldr	r2, [pc, #336]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b52      	ldr	r3, [pc, #328]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1e0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a46      	ldr	r2, [pc, #280]	; (8001134 <HAL_GPIO_Init+0x2d4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1dc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a45      	ldr	r2, [pc, #276]	; (8001138 <HAL_GPIO_Init+0x2d8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1d8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a44      	ldr	r2, [pc, #272]	; (800113c <HAL_GPIO_Init+0x2dc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1d4>
 8001030:	2303      	movs	r3, #3
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x1e2>
 8001034:	2305      	movs	r3, #5
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x1e2>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x1e2>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x1e2>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001052:	4937      	ldr	r1, [pc, #220]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001084:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d8:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f aea9 	bne.w	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800114a:	af00      	add	r7, sp, #0
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	f000 bef4 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 816a 	beq.w	8001442 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800116e:	4bb3      	ldr	r3, [pc, #716]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d00c      	beq.n	8001194 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800117a:	4bb0      	ldr	r3, [pc, #704]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b08      	cmp	r3, #8
 8001184:	d159      	bne.n	800123a <HAL_RCC_OscConfig+0xf6>
 8001186:	4bad      	ldr	r3, [pc, #692]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d152      	bne.n	800123a <HAL_RCC_OscConfig+0xf6>
 8001194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001198:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d102      	bne.n	80011c6 <HAL_RCC_OscConfig+0x82>
 80011c0:	4b9e      	ldr	r3, [pc, #632]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0xae>
 80011c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011ee:	4b93      	ldr	r3, [pc, #588]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80011fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011fe:	fa92 f2a2 	rbit	r2, r2
 8001202:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001206:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	f042 0220 	orr.w	r2, r2, #32
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f002 021f 	and.w	r2, r2, #31
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 810c 	beq.w	8001440 <HAL_RCC_OscConfig+0x2fc>
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8106 	bne.w	8001440 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	f000 be86 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001246:	4b7d      	ldr	r3, [pc, #500]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7c      	ldr	r2, [pc, #496]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e030      	b.n	80012b6 <HAL_RCC_OscConfig+0x172>
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x134>
 800125e:	4b77      	ldr	r3, [pc, #476]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a76      	ldr	r2, [pc, #472]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a73      	ldr	r2, [pc, #460]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01e      	b.n	80012b6 <HAL_RCC_OscConfig+0x172>
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x15a>
 8001284:	4b6d      	ldr	r3, [pc, #436]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6c      	ldr	r2, [pc, #432]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 800128a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e00b      	b.n	80012b6 <HAL_RCC_OscConfig+0x172>
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a66      	ldr	r2, [pc, #408]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b64      	ldr	r3, [pc, #400]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a63      	ldr	r2, [pc, #396]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012b6:	4b61      	ldr	r3, [pc, #388]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f023 020f 	bic.w	r2, r3, #15
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	495d      	ldr	r1, [pc, #372]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d059      	beq.n	8001388 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fa3a 	bl	800074c <HAL_GetTick>
 80012d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012de:	f7ff fa35 	bl	800074c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d902      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f000 be29 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
 80012f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001308:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x1e2>
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x20e>
 8001326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800133a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001342:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001356:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800135a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800135e:	fa92 f2a2 	rbit	r2, r2
 8001362:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001366:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f042 0220 	orr.w	r2, r2, #32
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f002 021f 	and.w	r2, r2, #31
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0ab      	beq.n	80012de <HAL_RCC_OscConfig+0x19a>
 8001386:	e05c      	b.n	8001442 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff f9e0 	bl	800074c <HAL_GetTick>
 800138c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff f9db 	bl	800074c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d902      	bls.n	80013a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f000 bdcf 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
 80013a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_RCC_OscConfig+0x296>
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x2c2>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_RCC_OscConfig+0x2f8>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800140e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800141a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	f002 021f 	and.w	r2, r2, #31
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ab      	bne.n	8001392 <HAL_RCC_OscConfig+0x24e>
 800143a:	e002      	b.n	8001442 <HAL_RCC_OscConfig+0x2fe>
 800143c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 816f 	beq.w	8001730 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001452:	4bd0      	ldr	r3, [pc, #832]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800145e:	4bcd      	ldr	r3, [pc, #820]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d16c      	bne.n	8001544 <HAL_RCC_OscConfig+0x400>
 800146a:	4bca      	ldr	r3, [pc, #808]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d166      	bne.n	8001544 <HAL_RCC_OscConfig+0x400>
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001488:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d102      	bne.n	80014a6 <HAL_RCC_OscConfig+0x362>
 80014a0:	4bbc      	ldr	r3, [pc, #752]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	e013      	b.n	80014ce <HAL_RCC_OscConfig+0x38a>
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ca:	4bb2      	ldr	r3, [pc, #712]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	2202      	movs	r2, #2
 80014d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014d8:	fa92 f2a2 	rbit	r2, r2
 80014dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014e4:	fab2 f282 	clz	r2, r2
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f002 021f 	and.w	r2, r2, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0x3cc>
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f000 bd1b 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4ba0      	ldr	r3, [pc, #640]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	21f8      	movs	r1, #248	; 0xf8
 8001520:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001528:	fa91 f1a1 	rbit	r1, r1
 800152c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001530:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001534:	fab1 f181 	clz	r1, r1
 8001538:	b2c9      	uxtb	r1, r1
 800153a:	408b      	lsls	r3, r1
 800153c:	4995      	ldr	r1, [pc, #596]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	e0f5      	b.n	8001730 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8085 	beq.w	800165a <HAL_RCC_OscConfig+0x516>
 8001550:	2301      	movs	r3, #1
 8001552:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001562:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001570:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	461a      	mov	r2, r3
 8001578:	2301      	movs	r3, #1
 800157a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff f8e6 	bl	800074c <HAL_GetTick>
 8001580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff f8e1 	bl	800074c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d902      	bls.n	800159c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	f000 bcd5 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <HAL_RCC_OscConfig+0x488>
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	e013      	b.n	80015f4 <HAL_RCC_OscConfig+0x4b0>
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2202      	movs	r2, #2
 80015f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015fe:	fa92 f2a2 	rbit	r2, r2
 8001602:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001606:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800160a:	fab2 f282 	clz	r2, r2
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f042 0220 	orr.w	r2, r2, #32
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f002 021f 	and.w	r2, r2, #31
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0af      	beq.n	8001586 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	21f8      	movs	r1, #248	; 0xf8
 8001636:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800163e:	fa91 f1a1 	rbit	r1, r1
 8001642:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001646:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800164a:	fab1 f181 	clz	r1, r1
 800164e:	b2c9      	uxtb	r1, r1
 8001650:	408b      	lsls	r3, r1
 8001652:	4950      	ldr	r1, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e06a      	b.n	8001730 <HAL_RCC_OscConfig+0x5ec>
 800165a:	2301      	movs	r3, #1
 800165c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800166c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800167a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	461a      	mov	r2, r3
 8001682:	2300      	movs	r3, #0
 8001684:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff f861 	bl	800074c <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff f85c 	bl	800074c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d902      	bls.n	80016a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f000 bc50 	b.w	8001f46 <HAL_RCC_OscConfig+0xe02>
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0x592>
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	e013      	b.n	80016fe <HAL_RCC_OscConfig+0x5ba>
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x650>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	2202      	movs	r2, #2
 8001700:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001704:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001708:	fa92 f2a2 	rbit	r2, r2
 800170c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001710:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001714:	fab2 f282 	clz	r2, r2
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f002 021f 	and.w	r2, r2, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1af      	bne.n	8001690 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80da 	beq.w	80018f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d069      	beq.n	800181e <HAL_RCC_OscConfig+0x6da>
 800174a:	2301      	movs	r3, #1
 800174c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800175c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x654>)
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	2301      	movs	r3, #1
 8001772:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe ffea 	bl	800074c <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177c:	e00e      	b.n	800179c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177e:	f7fe ffe5 	bl	800074c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d906      	bls.n	800179c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e3d9      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	10908120 	.word	0x10908120
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4ba5      	ldr	r3, [pc, #660]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80017e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017e6:	2102      	movs	r1, #2
 80017e8:	6019      	str	r1, [r3, #0]
 80017ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f1a3 	rbit	r1, r3
 80017f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017f8:	6019      	str	r1, [r3, #0]
  return result;
 80017fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0b0      	beq.n	800177e <HAL_RCC_OscConfig+0x63a>
 800181c:	e06a      	b.n	80018f4 <HAL_RCC_OscConfig+0x7b0>
 800181e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001834:	601a      	str	r2, [r3, #0]
  return result;
 8001836:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800183a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x934>)
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	2300      	movs	r3, #0
 800184e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7fe ff7c 	bl	800074c <HAL_GetTick>
 8001854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7fe ff77 	bl	800074c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e36b      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 800186e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80018b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018be:	2102      	movs	r1, #2
 80018c0:	6019      	str	r1, [r3, #0]
 80018c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f1a3 	rbit	r1, r3
 80018cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d0:	6019      	str	r1, [r3, #0]
  return result;
 80018d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1b2      	bne.n	800185a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8158 	beq.w	8001bb4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b5a      	ldr	r3, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x938>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11a      	bne.n	800197e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x938>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x938>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7fe fefa 	bl	800074c <HAL_GetTick>
 8001958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e009      	b.n	8001972 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7fe fef5 	bl	800074c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e2e9      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x938>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ef      	beq.n	800195e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x852>
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a39      	ldr	r2, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02f      	b.n	80019f6 <HAL_RCC_OscConfig+0x8b2>
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x876>
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e01d      	b.n	80019f6 <HAL_RCC_OscConfig+0x8b2>
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x89a>
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	e00b      	b.n	80019f6 <HAL_RCC_OscConfig+0x8b2>
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d06b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7fe fea4 	bl	800074c <HAL_GetTick>
 8001a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7fe fe9f 	bl	800074c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e291      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001a22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a26:	2202      	movs	r2, #2
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a3e:	2202      	movs	r2, #2
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a50:	601a      	str	r2, [r3, #0]
  return result;
 8001a52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d109      	bne.n	8001a80 <HAL_RCC_OscConfig+0x93c>
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <HAL_RCC_OscConfig+0x930>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x958>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	10908120 	.word	0x10908120
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4bbb      	ldr	r3, [pc, #748]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	fa92 f1a2 	rbit	r1, r2
 8001aae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ab2:	6011      	str	r1, [r2, #0]
  return result;
 8001ab4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f002 021f 	and.w	r2, r2, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d099      	beq.n	8001a0a <HAL_RCC_OscConfig+0x8c6>
 8001ad6:	e063      	b.n	8001ba0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fe38 	bl	800074c <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe fe33 	bl	800074c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e225      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001afa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001afe:	2202      	movs	r2, #2
 8001b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_OscConfig+0xa06>
 8001b44:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	e00d      	b.n	8001b66 <HAL_RCC_OscConfig+0xa22>
 8001b4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	fa92 f1a2 	rbit	r1, r2
 8001b78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b7c:	6011      	str	r1, [r2, #0]
  return result;
 8001b7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1a0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ba0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4a76      	ldr	r2, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 81c2 	beq.w	8001f44 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc0:	4b71      	ldr	r3, [pc, #452]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	f000 819c 	beq.w	8001f06 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8114 	bne.w	8001e02 <HAL_RCC_OscConfig+0xcbe>
 8001bda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bf2:	601a      	str	r2, [r3, #0]
  return result;
 8001bf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe fd9c 	bl	800074c <HAL_GetTick>
 8001c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe fd97 	bl	800074c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e18b      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001c2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c46:	601a      	str	r2, [r3, #0]
  return result;
 8001c48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0xb24>
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e01b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb5c>
 8001c68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ca4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca8:	6011      	str	r1, [r2, #0]
 8001caa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	fa92 f1a2 	rbit	r1, r2
 8001cb4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f002 021f 	and.w	r2, r2, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d19e      	bne.n	8001c1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	4925      	ldr	r1, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d10:	601a      	str	r2, [r3, #0]
  return result;
 8001d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fd0d 	bl	800074c <HAL_GetTick>
 8001d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d36:	e009      	b.n	8001d4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe fd08 	bl	800074c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0fc      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001d4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d64:	601a      	str	r2, [r3, #0]
  return result;
 8001d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0xc48>
 8001d80:	4b01      	ldr	r3, [pc, #4]	; (8001d88 <HAL_RCC_OscConfig+0xc44>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	e01e      	b.n	8001dc4 <HAL_RCC_OscConfig+0xc80>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_OscConfig+0xe0c>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dcc:	6011      	str	r1, [r2, #0]
 8001dce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fa92 f1a2 	rbit	r1, r2
 8001dd8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ddc:	6011      	str	r1, [r2, #0]
  return result;
 8001dde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d09b      	beq.n	8001d38 <HAL_RCC_OscConfig+0xbf4>
 8001e00:	e0a0      	b.n	8001f44 <HAL_RCC_OscConfig+0xe00>
 8001e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	601a      	str	r2, [r3, #0]
  return result;
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fc88 	bl	800074c <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe fc83 	bl	800074c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e077      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6e:	601a      	str	r2, [r3, #0]
  return result;
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0xd4c>
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_OscConfig+0xe0c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	e01b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd84>
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_RCC_OscConfig+0xe0c>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f107 0210 	add.w	r2, r7, #16
 8001ecc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	f107 0210 	add.w	r2, r7, #16
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fa92 f1a2 	rbit	r1, r2
 8001edc:	f107 020c 	add.w	r2, r7, #12
 8001ee0:	6011      	str	r1, [r2, #0]
  return result;
 8001ee2:	f107 020c 	add.w	r2, r7, #12
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f002 021f 	and.w	r2, r2, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d19e      	bne.n	8001e42 <HAL_RCC_OscConfig+0xcfe>
 8001f04:	e01e      	b.n	8001f44 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e018      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_RCC_OscConfig+0xe0c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b09e      	sub	sp, #120	; 0x78
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e162      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	498b      	ldr	r1, [pc, #556]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e14a      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	497f      	ldr	r1, [pc, #508]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80dc 	beq.w	8002180 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d13c      	bne.n	800204a <HAL_RCC_ClockConfig+0xf6>
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xa6>
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	e00f      	b.n	800201a <HAL_RCC_ClockConfig+0xc6>
 8001ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	667b      	str	r3, [r7, #100]	; 0x64
 8002008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200c:	663b      	str	r3, [r7, #96]	; 0x60
 800200e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d17b      	bne.n	800213e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0f3      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d13c      	bne.n	80020cc <HAL_RCC_ClockConfig+0x178>
 8002052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002056:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_ClockConfig+0x128>
 8002076:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e00f      	b.n	800209c <HAL_RCC_ClockConfig+0x148>
 800207c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
 8002090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80020a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13a      	bne.n	800213e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b2      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x1a0>
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e00d      	b.n	8002110 <HAL_RCC_ClockConfig+0x1bc>
 80020f4:	2302      	movs	r3, #2
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	2302      	movs	r3, #2
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2202      	movs	r2, #2
 8002112:	61ba      	str	r2, [r7, #24]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	617a      	str	r2, [r7, #20]
  return result;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e079      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	491a      	ldr	r1, [pc, #104]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe fafc 	bl	800074c <HAL_GetTick>
 8002154:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe faf8 	bl	800074c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e061      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_ClockConfig+0x260>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d214      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_RCC_ClockConfig+0x25c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e040      	b.n	8002232 <HAL_RCC_ClockConfig+0x2de>
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_RCC_ClockConfig+0x2e8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_RCC_ClockConfig+0x2e8>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4912      	ldr	r1, [pc, #72]	; (800223c <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021f6:	f000 f829 	bl	800224c <HAL_RCC_GetSysClockFreq>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_RCC_ClockConfig+0x2e8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002204:	22f0      	movs	r2, #240	; 0xf0
 8002206:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	60fa      	str	r2, [r7, #12]
  return result;
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	fab2 f282 	clz	r2, r2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	40d3      	lsrs	r3, r2
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x2ec>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	fa21 f303 	lsr.w	r3, r1, r3
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_RCC_ClockConfig+0x2f0>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCC_ClockConfig+0x2f4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fa4a 	bl	80006c4 <HAL_InitTick>
  
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3778      	adds	r7, #120	; 0x78
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	08002b34 	.word	0x08002b34
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	; 0x2c
 8002250:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x30>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x36>
 800227a:	e03c      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc4>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	e03c      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002288:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800228c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	607a      	str	r2, [r7, #4]
  return result;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	40d3      	lsrs	r3, r2
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	220f      	movs	r2, #15
 80022b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	60fa      	str	r2, [r7, #12]
  return result;
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	40d3      	lsrs	r3, r2
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	e004      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	623b      	str	r3, [r7, #32]
      break;
 80022f4:	e002      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f8:	623b      	str	r3, [r7, #32]
      break;
 80022fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	372c      	adds	r7, #44	; 0x2c
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	007a1200 	.word	0x007a1200
 8002314:	08002b4c 	.word	0x08002b4c
 8002318:	08002b5c 	.word	0x08002b5c
 800231c:	003d0900 	.word	0x003d0900

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800233e:	f7ff ffef 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800234c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002350:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	603a      	str	r2, [r7, #0]
  return result;
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	40d3      	lsrs	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08002b44 	.word	0x08002b44

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002382:	f7ff ffcd 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002386:	4601      	mov	r1, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002390:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002394:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	603a      	str	r2, [r7, #0]
  return result;
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	40d3      	lsrs	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08002b44 	.word	0x08002b44

080023c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e040      	b.n	8002454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe f8aa 	bl	800053c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8c0 	bl	8002584 <UART_SetConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e022      	b.n	8002454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9ec 	bl	80027f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa73 	bl	8002938 <UART_CheckIdleState>
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002470:	2b20      	cmp	r3, #32
 8002472:	f040 8082 	bne.w	800257a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_UART_Transmit+0x26>
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07a      	b.n	800257c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_UART_Transmit+0x38>
 8002490:	2302      	movs	r3, #2
 8002492:	e073      	b.n	800257c <HAL_UART_Transmit+0x120>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2221      	movs	r2, #33	; 0x21
 80024a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024aa:	f7fe f94f 	bl	800074c <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x80>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80024ec:	e02d      	b.n	800254a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fa66 	bl	80029ca <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e039      	b.n	800257c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251a:	b292      	uxth	r2, r2
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e008      	b.n	8002538 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b292      	uxth	r2, r2
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1cb      	bne.n	80024ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa32 	bl	80029ca <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e005      	b.n	800257c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <UART_SetConfig+0x258>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <UART_SetConfig+0x25c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d121      	bne.n	8002644 <UART_SetConfig+0xc0>
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <UART_SetConfig+0x260>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d817      	bhi.n	800263c <UART_SetConfig+0xb8>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <UART_SetConfig+0x90>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002625 	.word	0x08002625
 8002618:	08002631 	.word	0x08002631
 800261c:	08002637 	.word	0x08002637
 8002620:	0800262b 	.word	0x0800262b
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e01e      	b.n	8002668 <UART_SetConfig+0xe4>
 800262a:	2302      	movs	r3, #2
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e01b      	b.n	8002668 <UART_SetConfig+0xe4>
 8002630:	2304      	movs	r3, #4
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e018      	b.n	8002668 <UART_SetConfig+0xe4>
 8002636:	2308      	movs	r3, #8
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e015      	b.n	8002668 <UART_SetConfig+0xe4>
 800263c:	2310      	movs	r3, #16
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	bf00      	nop
 8002642:	e011      	b.n	8002668 <UART_SetConfig+0xe4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a67      	ldr	r2, [pc, #412]	; (80027e8 <UART_SetConfig+0x264>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d102      	bne.n	8002654 <UART_SetConfig+0xd0>
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	e009      	b.n	8002668 <UART_SetConfig+0xe4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a64      	ldr	r2, [pc, #400]	; (80027ec <UART_SetConfig+0x268>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d102      	bne.n	8002664 <UART_SetConfig+0xe0>
 800265e:	2300      	movs	r3, #0
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e001      	b.n	8002668 <UART_SetConfig+0xe4>
 8002664:	2310      	movs	r3, #16
 8002666:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002670:	d15c      	bne.n	800272c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d828      	bhi.n	80026ca <UART_SetConfig+0x146>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <UART_SetConfig+0xfc>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080026a5 	.word	0x080026a5
 8002684:	080026ad 	.word	0x080026ad
 8002688:	080026b5 	.word	0x080026b5
 800268c:	080026cb 	.word	0x080026cb
 8002690:	080026bb 	.word	0x080026bb
 8002694:	080026cb 	.word	0x080026cb
 8002698:	080026cb 	.word	0x080026cb
 800269c:	080026cb 	.word	0x080026cb
 80026a0:	080026c3 	.word	0x080026c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026a4:	f7ff fe48 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 80026a8:	61b8      	str	r0, [r7, #24]
        break;
 80026aa:	e013      	b.n	80026d4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026ac:	f7ff fe66 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80026b0:	61b8      	str	r0, [r7, #24]
        break;
 80026b2:	e00f      	b.n	80026d4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026b4:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <UART_SetConfig+0x26c>)
 80026b6:	61bb      	str	r3, [r7, #24]
        break;
 80026b8:	e00c      	b.n	80026d4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ba:	f7ff fdc7 	bl	800224c <HAL_RCC_GetSysClockFreq>
 80026be:	61b8      	str	r0, [r7, #24]
        break;
 80026c0:	e008      	b.n	80026d4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c6:	61bb      	str	r3, [r7, #24]
        break;
 80026c8:	e004      	b.n	80026d4 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	77bb      	strb	r3, [r7, #30]
        break;
 80026d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d074      	beq.n	80027c4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	005a      	lsls	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	441a      	add	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d916      	bls.n	8002726 <UART_SetConfig+0x1a2>
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fe:	d212      	bcs.n	8002726 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f023 030f 	bic.w	r3, r3, #15
 8002708:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	b29a      	uxth	r2, r3
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	4313      	orrs	r3, r2
 800271a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	89fa      	ldrh	r2, [r7, #14]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	e04e      	b.n	80027c4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	77bb      	strb	r3, [r7, #30]
 800272a:	e04b      	b.n	80027c4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d827      	bhi.n	8002782 <UART_SetConfig+0x1fe>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <UART_SetConfig+0x1b4>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	0800275d 	.word	0x0800275d
 800273c:	08002765 	.word	0x08002765
 8002740:	0800276d 	.word	0x0800276d
 8002744:	08002783 	.word	0x08002783
 8002748:	08002773 	.word	0x08002773
 800274c:	08002783 	.word	0x08002783
 8002750:	08002783 	.word	0x08002783
 8002754:	08002783 	.word	0x08002783
 8002758:	0800277b 	.word	0x0800277b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff fdec 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002760:	61b8      	str	r0, [r7, #24]
        break;
 8002762:	e013      	b.n	800278c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff fe0a 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8002768:	61b8      	str	r0, [r7, #24]
        break;
 800276a:	e00f      	b.n	800278c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <UART_SetConfig+0x26c>)
 800276e:	61bb      	str	r3, [r7, #24]
        break;
 8002770:	e00c      	b.n	800278c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002772:	f7ff fd6b 	bl	800224c <HAL_RCC_GetSysClockFreq>
 8002776:	61b8      	str	r0, [r7, #24]
        break;
 8002778:	e008      	b.n	800278c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800277a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277e:	61bb      	str	r3, [r7, #24]
        break;
 8002780:	e004      	b.n	800278c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	77bb      	strb	r3, [r7, #30]
        break;
 800278a:	bf00      	nop
    }

    if (pclk != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d018      	beq.n	80027c4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085a      	lsrs	r2, r3, #1
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	d908      	bls.n	80027c0 <UART_SetConfig+0x23c>
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d204      	bcs.n	80027c0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e001      	b.n	80027c4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	efff69f3 	.word	0xefff69f3
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40004400 	.word	0x40004400
 80027ec:	40004800 	.word	0x40004800
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01a      	beq.n	800290a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f2:	d10a      	bne.n	800290a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002948:	f7fd ff00 	bl	800074c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d10e      	bne.n	800297a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f82d 	bl	80029ca <UART_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e023      	b.n	80029c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d10e      	bne.n	80029a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f817 	bl	80029ca <UART_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e00d      	b.n	80029c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4613      	mov	r3, r2
 80029d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029da:	e05e      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d05a      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e4:	f7fd feb2 	bl	800074c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d302      	bcc.n	80029fa <UART_WaitOnFlagUntilTimeout+0x30>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11b      	bne.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e043      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02c      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a4e:	d124      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00f      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d091      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	4e0d      	ldr	r6, [pc, #52]	; (8002afc <__libc_init_array+0x38>)
 8002ac8:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002aca:	1ba4      	subs	r4, r4, r6
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	2500      	movs	r5, #0
 8002ad0:	42a5      	cmp	r5, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	4e0b      	ldr	r6, [pc, #44]	; (8002b04 <__libc_init_array+0x40>)
 8002ad6:	4c0c      	ldr	r4, [pc, #48]	; (8002b08 <__libc_init_array+0x44>)
 8002ad8:	f000 f820 	bl	8002b1c <_init>
 8002adc:	1ba4      	subs	r4, r4, r6
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	42a5      	cmp	r5, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aec:	4798      	blx	r3
 8002aee:	3501      	adds	r5, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af6:	4798      	blx	r3
 8002af8:	3501      	adds	r5, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002b6c 	.word	0x08002b6c
 8002b00:	08002b6c 	.word	0x08002b6c
 8002b04:	08002b6c 	.word	0x08002b6c
 8002b08:	08002b70 	.word	0x08002b70

08002b0c <memset>:
 8002b0c:	4402      	add	r2, r0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
