
f303k8_enc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000000c  08004030  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004030  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d645  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c6e  00000000  00000000  0002d681  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  000300a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae50  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae10  00000000  00000000  0004bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3248  00000000  00000000  00056a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000f9ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fc0 	.word	0x08003fc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fc0 	.word	0x08003fc0

080001c8 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80001d6:	f107 010c 	add.w	r1, r7, #12
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	2201      	movs	r2, #1
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <uart_putc+0x28>)
 80001e2:	f003 fb8d 	bl	8003900 <HAL_UART_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200001e4 	.word	0x200001e4

080001f4 <Count2rpm>:
TIM_Encoder_InitTypeDef sConfig3 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig1 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig2 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig3 = { 0 };
int32_t rpm[3] = { 0 };
void Count2rpm() {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	rpm[0] = TIM1->CNT - 30000;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <Count2rpm+0x5c>)
 80001fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001fc:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000200:	3b30      	subs	r3, #48	; 0x30
 8000202:	461a      	mov	r2, r3
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <Count2rpm+0x60>)
 8000206:	601a      	str	r2, [r3, #0]
	rpm[1] = TIM2->CNT - 30000;
 8000208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800020e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000212:	3b30      	subs	r3, #48	; 0x30
 8000214:	461a      	mov	r2, r3
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Count2rpm+0x60>)
 8000218:	605a      	str	r2, [r3, #4]
	rpm[2] = TIM3->CNT - 30000;
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <Count2rpm+0x64>)
 800021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800021e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000222:	3b30      	subs	r3, #48	; 0x30
 8000224:	461a      	mov	r2, r3
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <Count2rpm+0x60>)
 8000228:	609a      	str	r2, [r3, #8]
	TIM1->CNT = 30000;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Count2rpm+0x5c>)
 800022c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000230:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 30000;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	f247 5230 	movw	r2, #30000	; 0x7530
 800023a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 30000;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <Count2rpm+0x64>)
 800023e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40012c00 	.word	0x40012c00
 8000254:	200000b8 	.word	0x200000b8
 8000258:	40000400 	.word	0x40000400

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 8000260:	4b3a      	ldr	r3, [pc, #232]	; (800034c <main+0xf0>)
 8000262:	4a3b      	ldr	r2, [pc, #236]	; (8000350 <main+0xf4>)
 8000264:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 ffb9 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f891 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 fb63 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000272:	f000 fb31 	bl	80008d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000276:	f000 f91f 	bl	80004b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800027a:	f000 f9c7 	bl	800060c <MX_TIM2_Init>
  MX_TIM3_Init();
 800027e:	f000 fa65 	bl	800074c <MX_TIM3_Init>
  MX_TIM16_Init();
 8000282:	f000 fb03 	bl	800088c <MX_TIM16_Init>
  MX_CAN_Init();
 8000286:	f000 f8e1 	bl	800044c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 800028a:	4932      	ldr	r1, [pc, #200]	; (8000354 <main+0xf8>)
 800028c:	4832      	ldr	r0, [pc, #200]	; (8000358 <main+0xfc>)
 800028e:	f002 ff3b 	bl	8003108 <HAL_TIM_Encoder_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <main+0x40>
		Error_Handler();
 8000298:	f000 fb98 	bl	80009cc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800029c:	213c      	movs	r1, #60	; 0x3c
 800029e:	482e      	ldr	r0, [pc, #184]	; (8000358 <main+0xfc>)
 80002a0:	f002 ffd8 	bl	8003254 <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 80002a4:	4b2d      	ldr	r3, [pc, #180]	; (800035c <main+0x100>)
 80002a6:	f247 5230 	movw	r2, #30000	; 0x7530
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 80002ac:	492c      	ldr	r1, [pc, #176]	; (8000360 <main+0x104>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <main+0x108>)
 80002b0:	f002 ff2a 	bl	8003108 <HAL_TIM_Encoder_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <main+0x62>
		Error_Handler();
 80002ba:	f000 fb87 	bl	80009cc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80002be:	213c      	movs	r1, #60	; 0x3c
 80002c0:	4828      	ldr	r0, [pc, #160]	; (8000364 <main+0x108>)
 80002c2:	f002 ffc7 	bl	8003254 <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 80002c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ca:	f247 5230 	movw	r2, #30000	; 0x7530
 80002ce:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 80002d0:	4925      	ldr	r1, [pc, #148]	; (8000368 <main+0x10c>)
 80002d2:	4826      	ldr	r0, [pc, #152]	; (800036c <main+0x110>)
 80002d4:	f002 ff18 	bl	8003108 <HAL_TIM_Encoder_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <main+0x86>
		Error_Handler();
 80002de:	f000 fb75 	bl	80009cc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002e2:	213c      	movs	r1, #60	; 0x3c
 80002e4:	4821      	ldr	r0, [pc, #132]	; (800036c <main+0x110>)
 80002e6:	f002 ffb5 	bl	8003254 <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <main+0x114>)
 80002ec:	f247 5230 	movw	r2, #30000	; 0x7530
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim16);
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x118>)
 80002f4:	f002 feac 	bl	8003050 <HAL_TIM_Base_Start_IT>

	//can
	HAL_CAN_Start(&hcan);
 80002f8:	481f      	ldr	r0, [pc, #124]	; (8000378 <main+0x11c>)
 80002fa:	f001 f8f2 	bl	80014e2 <HAL_CAN_Start>
	TxHeader.StdId = 0x301;
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <main+0x120>)
 8000300:	f240 3201 	movw	r2, #769	; 0x301
 8000304:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000306:	4b1d      	ldr	r3, [pc, #116]	; (800037c <main+0x120>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <main+0x120>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <main+0x120>)
 8000314:	2208      	movs	r2, #8
 8000316:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <main+0x120>)
 800031a:	2200      	movs	r2, #0
 800031c:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800031e:	2108      	movs	r1, #8
 8000320:	4817      	ldr	r0, [pc, #92]	; (8000380 <main+0x124>)
 8000322:	f001 fbbf 	bl	8001aa4 <HAL_GPIO_TogglePin>
		xprintf("%d\t,%d\t,%d\t", rpm[0], rpm[1], rpm[2]);
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <main+0x128>)
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <main+0x128>)
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <main+0x128>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4815      	ldr	r0, [pc, #84]	; (8000388 <main+0x12c>)
 8000334:	f000 ff16 	bl	8001164 <xprintf>

		//can
		TxData[0] = (rpm[0]+512) & 0xFF;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <main+0x128>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	b25a      	sxtb	r2, r3
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <main+0x130>)
 8000340:	701a      	strb	r2, [r3, #0]
//			xprintf("Can out failure!!\r\n");
//			Error_Handler();
//		} else {
//			xprintf("Can out success!!\r\n");
//		}
		HAL_Delay(10);
 8000342:	200a      	movs	r0, #10
 8000344:	f000 ffb0 	bl	80012a8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000348:	e7e9      	b.n	800031e <main+0xc2>
 800034a:	bf00      	nop
 800034c:	200002d0 	.word	0x200002d0
 8000350:	080001c9 	.word	0x080001c9
 8000354:	20000028 	.word	0x20000028
 8000358:	20000148 	.word	0x20000148
 800035c:	40012c00 	.word	0x40012c00
 8000360:	2000004c 	.word	0x2000004c
 8000364:	20000198 	.word	0x20000198
 8000368:	20000070 	.word	0x20000070
 800036c:	200000f4 	.word	0x200000f4
 8000370:	40000400 	.word	0x40000400
 8000374:	20000280 	.word	0x20000280
 8000378:	200000cc 	.word	0x200000cc
 800037c:	20000268 	.word	0x20000268
 8000380:	48000400 	.word	0x48000400
 8000384:	200000b8 	.word	0x200000b8
 8000388:	08003fd8 	.word	0x08003fd8
 800038c:	20000140 	.word	0x20000140

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b096      	sub	sp, #88	; 0x58
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 fe06 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d2:	2301      	movs	r3, #1
 80003d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003e0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fb74 	bl	8001ad8 <HAL_RCC_OscConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003f6:	f000 fae9 	bl	80009cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	230f      	movs	r3, #15
 80003fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fe:	2302      	movs	r3, #2
 8000400:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fa66 	bl	80028e8 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000422:	f000 fad3 	bl	80009cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fc8e 	bl	8002d54 <HAL_RCCEx_PeriphCLKConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800043e:	f000 fac5 	bl	80009cc <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3758      	adds	r7, #88	; 0x58
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_CAN_Init+0x64>)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <MX_CAN_Init+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_CAN_Init+0x64>)
 8000458:	2202      	movs	r2, #2
 800045a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_CAN_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_CAN_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_CAN_Init+0x64>)
 800046a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800046e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_CAN_Init+0x64>)
 8000472:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8000476:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <MX_CAN_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_CAN_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_CAN_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_CAN_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_CAN_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_CAN_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_CAN_Init+0x64>)
 800049e:	f000 ff25 	bl	80012ec <HAL_CAN_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004a8:	f000 fa90 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	40006400 	.word	0x40006400

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	; 0x30
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2224      	movs	r2, #36	; 0x24
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fd72 	bl	8003fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004d6:	4b49      	ldr	r3, [pc, #292]	; (80005fc <MX_TIM1_Init+0x144>)
 80004d8:	4a49      	ldr	r2, [pc, #292]	; (8000600 <MX_TIM1_Init+0x148>)
 80004da:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80004dc:	4b47      	ldr	r3, [pc, #284]	; (80005fc <MX_TIM1_Init+0x144>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	4b46      	ldr	r3, [pc, #280]	; (80005fc <MX_TIM1_Init+0x144>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80004e8:	4b44      	ldr	r3, [pc, #272]	; (80005fc <MX_TIM1_Init+0x144>)
 80004ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ee:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <MX_TIM1_Init+0x144>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004f6:	4b41      	ldr	r3, [pc, #260]	; (80005fc <MX_TIM1_Init+0x144>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <MX_TIM1_Init+0x144>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
	sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
	sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <MX_TIM1_Init+0x14c>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
	sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000510:	2201      	movs	r2, #1
 8000512:	609a      	str	r2, [r3, #8]
	sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 8000514:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
	sConfig1.IC1Filter = 0;
 800051a:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <MX_TIM1_Init+0x14c>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
	sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
	sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000528:	2201      	movs	r2, #1
 800052a:	619a      	str	r2, [r3, #24]
	sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <MX_TIM1_Init+0x14c>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
	sConfig1.IC2Filter = 0;
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <MX_TIM1_Init+0x14c>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 8000538:	4932      	ldr	r1, [pc, #200]	; (8000604 <MX_TIM1_Init+0x14c>)
 800053a:	4830      	ldr	r0, [pc, #192]	; (80005fc <MX_TIM1_Init+0x144>)
 800053c:	f002 fde4 	bl	8003108 <HAL_TIM_Encoder_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x92>
		Error_Handler();
 8000546:	f000 fa41 	bl	80009cc <Error_Handler>
	}
	sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <MX_TIM1_Init+0x150>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	sMasterConfig1.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000550:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <MX_TIM1_Init+0x150>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
	sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_TIM1_Init+0x150>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1)
 800055c:	492a      	ldr	r1, [pc, #168]	; (8000608 <MX_TIM1_Init+0x150>)
 800055e:	4827      	ldr	r0, [pc, #156]	; (80005fc <MX_TIM1_Init+0x144>)
 8000560:	f003 f8f4 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM1_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 800056a:	f000 fa2f 	bl	80009cc <Error_Handler>
	}

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <MX_TIM1_Init+0x144>)
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <MX_TIM1_Init+0x148>)
 8000572:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_TIM1_Init+0x144>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <MX_TIM1_Init+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_TIM1_Init+0x144>)
 8000582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000586:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_TIM1_Init+0x144>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_TIM1_Init+0x144>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_TIM1_Init+0x144>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800059a:	2301      	movs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005b2:	2301      	movs	r3, #1
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <MX_TIM1_Init+0x144>)
 80005c6:	f002 fd9f 	bl	8003108 <HAL_TIM_Encoder_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80005d0:	f000 f9fc 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_TIM1_Init+0x144>)
 80005e6:	f003 f8b1 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80005f0:	f000 f9ec 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	3730      	adds	r7, #48	; 0x30
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000148 	.word	0x20000148
 8000600:	40012c00 	.word	0x40012c00
 8000604:	20000028 	.word	0x20000028
 8000608:	20000094 	.word	0x20000094

0800060c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2224      	movs	r2, #36	; 0x24
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fcc8 	bl	8003fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
	htim2.Instance = TIM2;
 800062a:	4b45      	ldr	r3, [pc, #276]	; (8000740 <MX_TIM2_Init+0x134>)
 800062c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000630:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <MX_TIM2_Init+0x134>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b41      	ldr	r3, [pc, #260]	; (8000740 <MX_TIM2_Init+0x134>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_TIM2_Init+0x134>)
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <MX_TIM2_Init+0x134>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_TIM2_Init+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
	sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 8000652:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <MX_TIM2_Init+0x138>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
	sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000658:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <MX_TIM2_Init+0x138>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
	sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <MX_TIM2_Init+0x138>)
 8000660:	2201      	movs	r2, #1
 8000662:	609a      	str	r2, [r3, #8]
	sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 8000664:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_TIM2_Init+0x138>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	sConfig2.IC1Filter = 0;
 800066a:	4b36      	ldr	r3, [pc, #216]	; (8000744 <MX_TIM2_Init+0x138>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <MX_TIM2_Init+0x138>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
	sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <MX_TIM2_Init+0x138>)
 8000678:	2201      	movs	r2, #1
 800067a:	619a      	str	r2, [r3, #24]
	sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 800067c:	4b31      	ldr	r3, [pc, #196]	; (8000744 <MX_TIM2_Init+0x138>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
	sConfig2.IC2Filter = 0;
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MX_TIM2_Init+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 8000688:	492e      	ldr	r1, [pc, #184]	; (8000744 <MX_TIM2_Init+0x138>)
 800068a:	482d      	ldr	r0, [pc, #180]	; (8000740 <MX_TIM2_Init+0x134>)
 800068c:	f002 fd3c 	bl	8003108 <HAL_TIM_Encoder_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8000696:	f000 f999 	bl	80009cc <Error_Handler>
	}
	sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_TIM2_Init+0x13c>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_TIM2_Init+0x13c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2)
 80006a6:	4928      	ldr	r1, [pc, #160]	; (8000748 <MX_TIM2_Init+0x13c>)
 80006a8:	4825      	ldr	r0, [pc, #148]	; (8000740 <MX_TIM2_Init+0x134>)
 80006aa:	f003 f84f 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80006b4:	f000 f98a 	bl	80009cc <Error_Handler>
	}

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_TIM2_Init+0x134>)
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_TIM2_Init+0x134>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM2_Init+0x134>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_TIM2_Init+0x134>)
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295
 80006d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_TIM2_Init+0x134>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_TIM2_Init+0x134>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_TIM2_Init+0x134>)
 800070c:	f002 fcfc 	bl	8003108 <HAL_TIM_Encoder_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000716:	f000 f959 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_TIM2_Init+0x134>)
 8000728:	f003 f810 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8000732:	f000 f94b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	; 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000198 	.word	0x20000198
 8000744:	2000004c 	.word	0x2000004c
 8000748:	200000a0 	.word	0x200000a0

0800074c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2224      	movs	r2, #36	; 0x24
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc28 	bl	8003fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

	htim3.Instance = TIM3;
 800076a:	4b44      	ldr	r3, [pc, #272]	; (800087c <MX_TIM3_Init+0x130>)
 800076c:	4a44      	ldr	r2, [pc, #272]	; (8000880 <MX_TIM3_Init+0x134>)
 800076e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000770:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_TIM3_Init+0x130>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <MX_TIM3_Init+0x130>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MX_TIM3_Init+0x130>)
 800077e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000782:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b3d      	ldr	r3, [pc, #244]	; (800087c <MX_TIM3_Init+0x130>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_TIM3_Init+0x130>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
	sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <MX_TIM3_Init+0x138>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
	sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <MX_TIM3_Init+0x138>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
	sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800079c:	4b39      	ldr	r3, [pc, #228]	; (8000884 <MX_TIM3_Init+0x138>)
 800079e:	2201      	movs	r2, #1
 80007a0:	609a      	str	r2, [r3, #8]
	sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_TIM3_Init+0x138>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	sConfig3.IC1Filter = 0;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <MX_TIM3_Init+0x138>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
	sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <MX_TIM3_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
	sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_TIM3_Init+0x138>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	619a      	str	r2, [r3, #24]
	sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <MX_TIM3_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
	sConfig3.IC2Filter = 0;
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <MX_TIM3_Init+0x138>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 80007c6:	492f      	ldr	r1, [pc, #188]	; (8000884 <MX_TIM3_Init+0x138>)
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <MX_TIM3_Init+0x130>)
 80007ca:	f002 fc9d 	bl	8003108 <HAL_TIM_Encoder_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x8c>
		Error_Handler();
 80007d4:	f000 f8fa 	bl	80009cc <Error_Handler>
	}
	sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_TIM3_Init+0x13c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
	sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_TIM3_Init+0x13c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3)
 80007e4:	4928      	ldr	r1, [pc, #160]	; (8000888 <MX_TIM3_Init+0x13c>)
 80007e6:	4825      	ldr	r0, [pc, #148]	; (800087c <MX_TIM3_Init+0x130>)
 80007e8:	f002 ffb0 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80007f2:	f000 f8eb 	bl	80009cc <Error_Handler>
	}
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_TIM3_Init+0x130>)
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <MX_TIM3_Init+0x134>)
 80007fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM3_Init+0x130>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TIM3_Init+0x130>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM3_Init+0x130>)
 800080a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM3_Init+0x130>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM3_Init+0x130>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_TIM3_Init+0x130>)
 8000848:	f002 fc5e 	bl	8003108 <HAL_TIM_Encoder_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8000852:	f000 f8bb 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM3_Init+0x130>)
 8000864:	f002 ff72 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 800086e:	f000 f8ad 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000f4 	.word	0x200000f4
 8000880:	40000400 	.word	0x40000400
 8000884:	20000070 	.word	0x20000070
 8000888:	200000ac 	.word	0x200000ac

0800088c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_TIM16_Init+0x44>)
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <MX_TIM16_Init+0x48>)
 8000894:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_TIM16_Init+0x44>)
 8000898:	2263      	movs	r2, #99	; 0x63
 800089a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_TIM16_Init+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 7200;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_TIM16_Init+0x44>)
 80008a4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80008a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_TIM16_Init+0x44>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_TIM16_Init+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_TIM16_Init+0x44>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_TIM16_Init+0x44>)
 80008be:	f002 fb6f 	bl	8002fa0 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008c8:	f000 f880 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000280 	.word	0x20000280
 80008d4:	40014400 	.word	0x40014400

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_USART2_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800091c:	f002 ffa2 	bl	8003864 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f851 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001e4 	.word	0x200001e4
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_GPIO_Init+0x8c>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x8c>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <MX_GPIO_Init+0x8c>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_GPIO_Init+0x8c>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x90>)
 800099c:	f001 f86a 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009a0:	2308      	movs	r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x90>)
 80009b8:	f000 feea 	bl	8001790 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000400 	.word	0x48000400

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x44>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_CAN_MspInit+0x80>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d129      	bne.n	8000a9a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fe7b 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40006400 	.word	0x40006400
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <HAL_TIM_Encoder_MspInit+0x14c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d132      	bne.n	8000b34 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ace:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b48      	ldr	r3, [pc, #288]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae2:	623b      	str	r3, [r7, #32]
 8000ae4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b45      	ldr	r3, [pc, #276]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a44      	ldr	r2, [pc, #272]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b10:	2306      	movs	r3, #6
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fe37 	bl	8001790 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2019      	movs	r0, #25
 8000b28:	f000 fdfb 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b2c:	2019      	movs	r0, #25
 8000b2e:	f000 fe14 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b32:	e05c      	b.n	8000bee <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b3c:	d129      	bne.n	8000b92 <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f000 fe00 	bl	8001790 <HAL_GPIO_Init>
}
 8000b90:	e02d      	b.n	8000bee <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_TIM_Encoder_MspInit+0x154>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d128      	bne.n	8000bee <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbe:	6153      	str	r3, [r2, #20]
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x150>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000bcc:	2350      	movs	r3, #80	; 0x50
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fdd1 	bl	8001790 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40000400 	.word	0x40000400

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_TIM_Base_MspInit+0x44>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d113      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2019      	movs	r0, #25
 8000c34:	f000 fd75 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c38:	2019      	movs	r0, #25
 8000c3a:	f000 fd8e 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40014400 	.word	0x40014400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d129      	bne.n	8000cc6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ca2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f000 fd65 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 fa9c 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000d3a:	f002 fb18 	bl	800336e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8000d40:	f002 fb15 	bl	800336e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	Count2rpm();
 8000d44:	f7ff fa56 	bl	80001f4 <Count2rpm>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000148 	.word	0x20000148
 8000d50:	20000280 	.word	0x20000280

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	d102      	bne.n	8000d8e <xputc+0x16>
 8000d88:	200d      	movs	r0, #13
 8000d8a:	f7ff fff5 	bl	8000d78 <xputc>

	if (outptr) {		/* Destination is memory */
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <xputc+0x48>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <xputc+0x48>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <xputc+0x48>)
 8000d9e:	600a      	str	r2, [r1, #0]
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	701a      	strb	r2, [r3, #0]
		return;
 8000da4:	e008      	b.n	8000db8 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <xputc+0x4c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <xputc+0x4c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	4610      	mov	r0, r2
 8000db6:	4798      	blx	r3
	}
}
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000c4 	.word	0x200000c4
 8000dc4:	200002d0 	.word	0x200002d0

08000dc8 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000dd0:	e006      	b.n	8000de0 <xputs+0x18>
		xputc(*str++);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ffcc 	bl	8000d78 <xputc>
	while (*str) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f4      	bne.n	8000dd2 <xputs+0xa>
	}
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8000e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 81a3 	beq.w	8001156 <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e14:	2b25      	cmp	r3, #37	; 0x25
 8000e16:	d005      	beq.n	8000e24 <xvprintf+0x34>
			xputc(c); continue;
 8000e18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffab 	bl	8000d78 <xputc>
 8000e22:	e197      	b.n	8001154 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8000e24:	2300      	movs	r3, #0
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
 8000e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8000e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e3c:	2b30      	cmp	r3, #48	; 0x30
 8000e3e:	d108      	bne.n	8000e52 <xvprintf+0x62>
			f = 1; c = *fmt++;
 8000e40:	2301      	movs	r3, #1
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e50:	e00b      	b.n	8000e6a <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e56:	2b2d      	cmp	r3, #45	; 0x2d
 8000e58:	d107      	bne.n	8000e6a <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e70:	d126      	bne.n	8000ec0 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	1d1a      	adds	r2, r3, #4
 8000e76:	603a      	str	r2, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8000e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da04      	bge.n	8000e8c <xvprintf+0x9c>
				n = 0 - n;
 8000e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e84:	425b      	negs	r3, r3
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8000e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e9c:	e018      	b.n	8000ed0 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b30      	subs	r3, #48	; 0x30
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ec6:	d903      	bls.n	8000ed0 <xvprintf+0xe0>
 8000ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ecc:	2b39      	cmp	r3, #57	; 0x39
 8000ece:	d9e6      	bls.n	8000e9e <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8000ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed4:	2b6c      	cmp	r3, #108	; 0x6c
 8000ed6:	d003      	beq.n	8000ee0 <xvprintf+0xf0>
 8000ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000edc:	2b4c      	cmp	r3, #76	; 0x4c
 8000ede:	d109      	bne.n	8000ef4 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8000ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 812e 	beq.w	800115a <xvprintf+0x36a>
		d = c;
 8000efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8000f06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f0a:	2b60      	cmp	r3, #96	; 0x60
 8000f0c:	d904      	bls.n	8000f18 <xvprintf+0x128>
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	3b20      	subs	r3, #32
 8000f14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8000f18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f1c:	3b42      	subs	r3, #66	; 0x42
 8000f1e:	2b16      	cmp	r3, #22
 8000f20:	d873      	bhi.n	800100a <xvprintf+0x21a>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <xvprintf+0x138>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000ff3 	.word	0x08000ff3
 8000f2c:	08000fe1 	.word	0x08000fe1
 8000f30:	08000fff 	.word	0x08000fff
 8000f34:	0800100b 	.word	0x0800100b
 8000f38:	0800100b 	.word	0x0800100b
 8000f3c:	0800100b 	.word	0x0800100b
 8000f40:	0800100b 	.word	0x0800100b
 8000f44:	0800100b 	.word	0x0800100b
 8000f48:	0800100b 	.word	0x0800100b
 8000f4c:	0800100b 	.word	0x0800100b
 8000f50:	0800100b 	.word	0x0800100b
 8000f54:	0800100b 	.word	0x0800100b
 8000f58:	0800100b 	.word	0x0800100b
 8000f5c:	08000ff9 	.word	0x08000ff9
 8000f60:	0800100b 	.word	0x0800100b
 8000f64:	0800100b 	.word	0x0800100b
 8000f68:	0800100b 	.word	0x0800100b
 8000f6c:	08000f85 	.word	0x08000f85
 8000f70:	0800100b 	.word	0x0800100b
 8000f74:	08000fff 	.word	0x08000fff
 8000f78:	0800100b 	.word	0x0800100b
 8000f7c:	0800100b 	.word	0x0800100b
 8000f80:	08001005 	.word	0x08001005
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	1d1a      	adds	r2, r3, #4
 8000f88:	603a      	str	r2, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
 8000f92:	e002      	b.n	8000f9a <xvprintf+0x1aa>
 8000f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f96:	3301      	adds	r3, #1
 8000f98:	647b      	str	r3, [r7, #68]	; 0x44
 8000f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f6      	bne.n	8000f94 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000fa6:	e002      	b.n	8000fae <xvprintf+0x1be>
 8000fa8:	2020      	movs	r0, #32
 8000faa:	f7ff fee5 	bl	8000d78 <xputc>
 8000fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <xvprintf+0x1d4>
 8000fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	647a      	str	r2, [r7, #68]	; 0x44
 8000fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f1      	bhi.n	8000fa8 <xvprintf+0x1b8>
			xputs(p);
 8000fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fc6:	f7ff feff 	bl	8000dc8 <xputs>
			while (j++ < w) xputc(' ');
 8000fca:	e002      	b.n	8000fd2 <xvprintf+0x1e2>
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f7ff fed3 	bl	8000d78 <xputc>
 8000fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8000fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d8f6      	bhi.n	8000fcc <xvprintf+0x1dc>
			continue;
 8000fde:	e0b9      	b.n	8001154 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	1d1a      	adds	r2, r3, #4
 8000fe4:	603a      	str	r2, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fec4 	bl	8000d78 <xputc>
 8000ff0:	e0b0      	b.n	8001154 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ff6:	e00e      	b.n	8001016 <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ffc:	e00b      	b.n	8001016 <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000ffe:	230a      	movs	r3, #10
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001002:	e008      	b.n	8001016 <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001004:	2310      	movs	r3, #16
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001008:	e005      	b.n	8001016 <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 800100a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff feb2 	bl	8000d78 <xputc>
 8001014:	e09e      	b.n	8001154 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8001016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <xvprintf+0x23c>
			v = va_arg(arp, long);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	1d1a      	adds	r2, r3, #4
 8001024:	603a      	str	r2, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
 800102a:	e00d      	b.n	8001048 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 800102c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001030:	2b44      	cmp	r3, #68	; 0x44
 8001032:	d104      	bne.n	800103e <xvprintf+0x24e>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	1d1a      	adds	r2, r3, #4
 8001038:	603a      	str	r2, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	e003      	b.n	8001046 <xvprintf+0x256>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	1d1a      	adds	r2, r3, #4
 8001042:	603a      	str	r2, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8001048:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800104c:	2b44      	cmp	r3, #68	; 0x44
 800104e:	d109      	bne.n	8001064 <xvprintf+0x274>
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	2b00      	cmp	r3, #0
 8001054:	da06      	bge.n	8001064 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	425b      	negs	r3, r3
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
 800105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8001064:	2300      	movs	r3, #0
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
 8001068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001070:	fbb3 f2f2 	udiv	r2, r3, r2
 8001074:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001076:	fb01 f202 	mul.w	r2, r1, r2
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800108a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800108e:	2b09      	cmp	r3, #9
 8001090:	d90b      	bls.n	80010aa <xvprintf+0x2ba>
 8001092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001096:	2b78      	cmp	r3, #120	; 0x78
 8001098:	d101      	bne.n	800109e <xvprintf+0x2ae>
 800109a:	2227      	movs	r2, #39	; 0x27
 800109c:	e000      	b.n	80010a0 <xvprintf+0x2b0>
 800109e:	2207      	movs	r2, #7
 80010a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010a4:	4413      	add	r3, r2
 80010a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 80010aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80010b0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80010b4:	3230      	adds	r2, #48	; 0x30
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80010bc:	440b      	add	r3, r1
 80010be:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <xvprintf+0x2de>
 80010c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ca:	2b1f      	cmp	r3, #31
 80010cc:	d9ce      	bls.n	800106c <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 80010ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <xvprintf+0x2fa>
 80010d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80010de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010e2:	4413      	add	r3, r2
 80010e4:	222d      	movs	r2, #45	; 0x2d
 80010e6:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80010ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <xvprintf+0x30c>
 80010f8:	2330      	movs	r3, #48	; 0x30
 80010fa:	e000      	b.n	80010fe <xvprintf+0x30e>
 80010fc:	2320      	movs	r3, #32
 80010fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8001102:	e004      	b.n	800110e <xvprintf+0x31e>
 8001104:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe35 	bl	8000d78 <xputc>
 800110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <xvprintf+0x334>
 8001118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	647a      	str	r2, [r7, #68]	; 0x44
 800111e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001120:	429a      	cmp	r2, r3
 8001122:	d8ef      	bhi.n	8001104 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8001124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001126:	3b01      	subs	r3, #1
 8001128:	64bb      	str	r3, [r7, #72]	; 0x48
 800112a:	f107 0208 	add.w	r2, r7, #8
 800112e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe1f 	bl	8000d78 <xputc>
 800113a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f1      	bne.n	8001124 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8001140:	e002      	b.n	8001148 <xvprintf+0x358>
 8001142:	2020      	movs	r0, #32
 8001144:	f7ff fe18 	bl	8000d78 <xputc>
 8001148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	647a      	str	r2, [r7, #68]	; 0x44
 800114e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f6      	bhi.n	8001142 <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8001154:	e651      	b.n	8000dfa <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 800115a:	bf00      	nop
	}
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001164:	b40f      	push	{r0, r1, r2, r3}
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	6938      	ldr	r0, [r7, #16]
 8001176:	f7ff fe3b 	bl	8000df0 <xvprintf>
	va_end(arp);
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff fdcf 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 fed7 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff f84f 	bl	800025c <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011cc:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 80011d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d4:	200002d8 	.word	0x200002d8

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fa8d 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fbf0 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 faa5 	bl	8001776 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 fa6d 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	200002d4 	.word	0x200002d4

08001290 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;  
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200002d4 	.word	0x200002d4

080012a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_Delay+0x40>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0ed      	b.n	80014da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fb8a 	bl	8000a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0202 	bic.w	r2, r2, #2
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffb6 	bl	8001290 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffb2 	bl	8001290 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0c5      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e5      	bne.n	8001328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff ff90 	bl	8001290 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001372:	e012      	b.n	800139a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff ff8c 	bl	8001290 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d90b      	bls.n	800139a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e09f      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e5      	beq.n	8001374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e5b      	ldrb	r3, [r3, #25]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d108      	bne.n	80013ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e007      	b.n	80013fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e9b      	ldrb	r3, [r3, #26]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e007      	b.n	8001426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0220 	bic.w	r2, r2, #32
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7edb      	ldrb	r3, [r3, #27]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e007      	b.n	8001450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0210 	orr.w	r2, r2, #16
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f5b      	ldrb	r3, [r3, #29]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	ea42 0103 	orr.w	r1, r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12e      	bne.n	8001554 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800150e:	f7ff febf 	bl	8001290 <HAL_GetTick>
 8001512:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001514:	e012      	b.n	800153c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001516:	f7ff febb 	bl	8001290 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b0a      	cmp	r3, #10
 8001522:	d90b      	bls.n	800153c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2205      	movs	r2, #5
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e012      	b.n	8001562 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e5      	bne.n	8001516 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e006      	b.n	8001562 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e14e      	b.n	8001a3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8140 	beq.w	8001a38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d00b      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017cc:	2b11      	cmp	r3, #17
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0xea>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 809a 	beq.w	8001a38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a54      	ldr	r2, [pc, #336]	; (8001a5c <HAL_GPIO_Init+0x2cc>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800191c:	4a50      	ldr	r2, [pc, #320]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1e0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <HAL_GPIO_Init+0x2d4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <HAL_GPIO_Init+0x2d8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1d8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <HAL_GPIO_Init+0x2dc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1d4>
 8001960:	2303      	movs	r3, #3
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001964:	2305      	movs	r3, #5
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001968:	2302      	movs	r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001970:	2300      	movs	r3, #0
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001982:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001990:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b4:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019de:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f aea9 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43d9      	mvns	r1, r3
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f000 bef4 	b.w	80028da <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 816a 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b02:	4bb3      	ldr	r3, [pc, #716]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0e:	4bb0      	ldr	r3, [pc, #704]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d159      	bne.n	8001bce <HAL_RCC_OscConfig+0xf6>
 8001b1a:	4bad      	ldr	r3, [pc, #692]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d152      	bne.n	8001bce <HAL_RCC_OscConfig+0xf6>
 8001b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_OscConfig+0x82>
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0xae>
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b76:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b82:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b92:	fa92 f2a2 	rbit	r2, r2
 8001b96:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b9a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 810c 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x2fc>
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8106 	bne.w	8001dd4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f000 be86 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x110>
 8001bda:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e030      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x134>
 8001bf2:	4b77      	ldr	r3, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a76      	ldr	r2, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b74      	ldr	r3, [pc, #464]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a73      	ldr	r2, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01e      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x15a>
 8001c18:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	495d      	ldr	r1, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d059      	beq.n	8001d1c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb12 	bl	8001290 <HAL_GetTick>
 8001c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c72:	f7ff fb0d 	bl	8001290 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d902      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f000 be29 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_OscConfig+0x1e2>
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x20e>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cf2:	fa92 f2a2 	rbit	r2, r2
 8001cf6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001cfa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ab      	beq.n	8001c72 <HAL_RCC_OscConfig+0x19a>
 8001d1a:	e05c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fab8 	bl	8001290 <HAL_GetTick>
 8001d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d26:	f7ff fab3 	bl	8001290 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d902      	bls.n	8001d3c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f000 bdcf 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
 8001d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_OscConfig+0x296>
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x2c2>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d8a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCC_OscConfig+0x2f8>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d9e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001da2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001dae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ab      	bne.n	8001d26 <HAL_RCC_OscConfig+0x24e>
 8001dce:	e002      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2fe>
 8001dd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 816f 	beq.w	80020c4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001de6:	4bd0      	ldr	r3, [pc, #832]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df2:	4bcd      	ldr	r3, [pc, #820]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d16c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x400>
 8001dfe:	4bca      	ldr	r3, [pc, #808]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d166      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x400>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_OscConfig+0x362>
 8001e34:	4bbc      	ldr	r3, [pc, #752]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	e013      	b.n	8001e62 <HAL_RCC_OscConfig+0x38a>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e5e:	4bb2      	ldr	r3, [pc, #712]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2202      	movs	r2, #2
 8001e64:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e68:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e74:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f000 bd1b 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	21f8      	movs	r1, #248	; 0xf8
 8001eb4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ebc:	fa91 f1a1 	rbit	r1, r1
 8001ec0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ec4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ec8:	fab1 f181 	clz	r1, r1
 8001ecc:	b2c9      	uxtb	r1, r1
 8001ece:	408b      	lsls	r3, r1
 8001ed0:	4995      	ldr	r1, [pc, #596]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	e0f5      	b.n	80020c4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8085 	beq.w	8001fee <HAL_RCC_OscConfig+0x516>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ef6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff f9be 	bl	8001290 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f9b9 	bl	8001290 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d902      	bls.n	8001f30 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f000 bcd5 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_OscConfig+0x488>
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x4b0>
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f92:	fa92 f2a2 	rbit	r2, r2
 8001f96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f042 0220 	orr.w	r2, r2, #32
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0af      	beq.n	8001f1a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	21f8      	movs	r1, #248	; 0xf8
 8001fca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fd2:	fa91 f1a1 	rbit	r1, r1
 8001fd6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fda:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fde:	fab1 f181 	clz	r1, r1
 8001fe2:	b2c9      	uxtb	r1, r1
 8001fe4:	408b      	lsls	r3, r1
 8001fe6:	4950      	ldr	r1, [pc, #320]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e06a      	b.n	80020c4 <HAL_RCC_OscConfig+0x5ec>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002000:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	461a      	mov	r2, r3
 8002016:	2300      	movs	r3, #0
 8002018:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff f939 	bl	8001290 <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff f934 	bl	8001290 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 bc50 	b.w	80028da <HAL_RCC_OscConfig+0xe02>
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800204c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0x592>
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e013      	b.n	8002092 <HAL_RCC_OscConfig+0x5ba>
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002082:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x650>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2202      	movs	r2, #2
 8002094:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002098:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1af      	bne.n	8002024 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80da 	beq.w	8002288 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d069      	beq.n	80021b2 <HAL_RCC_OscConfig+0x6da>
 80020de:	2301      	movs	r3, #1
 80020e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x654>)
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	461a      	mov	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff f8c2 	bl	8001290 <HAL_GetTick>
 800210c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff f8bd 	bl	8001290 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d906      	bls.n	8002130 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e3d9      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	10908120 	.word	0x10908120
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002142:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002146:	2202      	movs	r2, #2
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002170:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4ba5      	ldr	r3, [pc, #660]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800217a:	2102      	movs	r1, #2
 800217c:	6019      	str	r1, [r3, #0]
 800217e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f1a3 	rbit	r1, r3
 8002188:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800218c:	6019      	str	r1, [r3, #0]
  return result;
 800218e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0b0      	beq.n	8002112 <HAL_RCC_OscConfig+0x63a>
 80021b0:	e06a      	b.n	8002288 <HAL_RCC_OscConfig+0x7b0>
 80021b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021c8:	601a      	str	r2, [r3, #0]
  return result;
 80021ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_RCC_OscConfig+0x934>)
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	461a      	mov	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff f854 	bl	8001290 <HAL_GetTick>
 80021e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	e009      	b.n	8002202 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ee:	f7ff f84f 	bl	8001290 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e36b      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 8002202:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002206:	2202      	movs	r2, #2
 8002208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002248:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002252:	2102      	movs	r1, #2
 8002254:	6019      	str	r1, [r3, #0]
 8002256:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f1a3 	rbit	r1, r3
 8002260:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002264:	6019      	str	r1, [r3, #0]
  return result;
 8002266:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1b2      	bne.n	80021ee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8158 	beq.w	8002548 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <HAL_RCC_OscConfig+0x938>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11a      	bne.n	8002312 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022dc:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_RCC_OscConfig+0x938>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_RCC_OscConfig+0x938>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e8:	f7fe ffd2 	bl	8001290 <HAL_GetTick>
 80022ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e009      	b.n	8002306 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe ffcd 	bl	8001290 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e2e9      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_RCC_OscConfig+0x938>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ef      	beq.n	80022f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x852>
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a39      	ldr	r2, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e02f      	b.n	800238a <HAL_RCC_OscConfig+0x8b2>
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x876>
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a33      	ldr	r2, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e01d      	b.n	800238a <HAL_RCC_OscConfig+0x8b2>
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x89a>
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0x8b2>
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d06b      	beq.n	800246c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe ff7c 	bl	8001290 <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe ff77 	bl	8001290 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e291      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 80023b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d109      	bne.n	8002414 <HAL_RCC_OscConfig+0x93c>
 8002400:	4b01      	ldr	r3, [pc, #4]	; (8002408 <HAL_RCC_OscConfig+0x930>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x958>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	10908120 	.word	0x10908120
 8002410:	40007000 	.word	0x40007000
 8002414:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4bbb      	ldr	r3, [pc, #748]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002434:	2102      	movs	r1, #2
 8002436:	6011      	str	r1, [r2, #0]
 8002438:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	fa92 f1a2 	rbit	r1, r2
 8002442:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	fab2 f282 	clz	r2, r2
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f002 021f 	and.w	r2, r2, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d099      	beq.n	800239e <HAL_RCC_OscConfig+0x8c6>
 800246a:	e063      	b.n	8002534 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe ff10 	bl	8001290 <HAL_GetTick>
 8002470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe ff0b 	bl	8001290 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e225      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 800248e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024bc:	601a      	str	r2, [r3, #0]
  return result;
 80024be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0xa06>
 80024d8:	4b90      	ldr	r3, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	e00d      	b.n	80024fa <HAL_RCC_OscConfig+0xa22>
 80024de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4b89      	ldr	r3, [pc, #548]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024fe:	2102      	movs	r1, #2
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fa92 f1a2 	rbit	r1, r2
 800250c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002510:	6011      	str	r1, [r2, #0]
  return result;
 8002512:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1a0      	bne.n	8002476 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002534:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b77      	ldr	r3, [pc, #476]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	4a76      	ldr	r2, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002546:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 81c2 	beq.w	80028d8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002554:	4b71      	ldr	r3, [pc, #452]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	f000 819c 	beq.w	800289a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	f040 8114 	bne.w	8002796 <HAL_RCC_OscConfig+0xcbe>
 800256e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002586:	601a      	str	r2, [r3, #0]
  return result;
 8002588:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800258c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002598:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	2300      	movs	r3, #0
 80025a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe74 	bl	8001290 <HAL_GetTick>
 80025a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e009      	b.n	80025c2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fe6f 	bl	8001290 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e18b      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 80025c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0xb24>
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e01b      	b.n	8002634 <HAL_RCC_OscConfig+0xb5c>
 80025fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800261a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800263c:	6011      	str	r1, [r2, #0]
 800263e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800264c:	6011      	str	r1, [r2, #0]
  return result;
 800264e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d19e      	bne.n	80025ae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	430b      	orrs	r3, r1
 8002686:	4925      	ldr	r1, [pc, #148]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a4:	601a      	str	r2, [r3, #0]
  return result;
 80026a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	2301      	movs	r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe fde5 	bl	8001290 <HAL_GetTick>
 80026c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ca:	e009      	b.n	80026e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fde0 	bl	8001290 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0fc      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 80026e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	601a      	str	r2, [r3, #0]
  return result;
 80026fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0xc48>
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	e01e      	b.n	8002758 <HAL_RCC_OscConfig+0xc80>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800273e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_OscConfig+0xe0c>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800275c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002760:	6011      	str	r1, [r2, #0]
 8002762:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fa92 f1a2 	rbit	r1, r2
 800276c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002770:	6011      	str	r1, [r2, #0]
  return result;
 8002772:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d09b      	beq.n	80026cc <HAL_RCC_OscConfig+0xbf4>
 8002794:	e0a0      	b.n	80028d8 <HAL_RCC_OscConfig+0xe00>
 8002796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	461a      	mov	r2, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd60 	bl	8001290 <HAL_GetTick>
 80027d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fd5b 	bl	8001290 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e077      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
 80027ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d102      	bne.n	8002824 <HAL_RCC_OscConfig+0xd4c>
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_OscConfig+0xe0c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e01b      	b.n	800285c <HAL_RCC_OscConfig+0xd84>
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f107 0320 	add.w	r3, r7, #32
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_OscConfig+0xe0c>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f107 0210 	add.w	r2, r7, #16
 8002860:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	f107 0210 	add.w	r2, r7, #16
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	fa92 f1a2 	rbit	r1, r2
 8002870:	f107 020c 	add.w	r2, r7, #12
 8002874:	6011      	str	r1, [r2, #0]
  return result;
 8002876:	f107 020c 	add.w	r2, r7, #12
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d19e      	bne.n	80027d6 <HAL_RCC_OscConfig+0xcfe>
 8002898:	e01e      	b.n	80028d8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e018      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_RCC_OscConfig+0xe0c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09e      	sub	sp, #120	; 0x78
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e162      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b8d      	ldr	r3, [pc, #564]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	498b      	ldr	r1, [pc, #556]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b89      	ldr	r3, [pc, #548]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e14a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	497f      	ldr	r1, [pc, #508]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80dc 	beq.w	8002b14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d13c      	bne.n	80029de <HAL_RCC_ClockConfig+0xf6>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_RCC_ClockConfig+0xa6>
 8002988:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e00f      	b.n	80029ae <HAL_RCC_ClockConfig+0xc6>
 800298e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
 800299c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a0:	663b      	str	r3, [r7, #96]	; 0x60
 80029a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029aa:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80029b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0220 	orr.w	r2, r2, #32
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d17b      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0f3      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d13c      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x178>
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x128>
 8002a0a:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e00f      	b.n	8002a30 <HAL_RCC_ClockConfig+0x148>
 8002a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d13a      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b2      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
 8002a60:	2302      	movs	r3, #2
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e00d      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1bc>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	61ba      	str	r2, [r7, #24]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	617a      	str	r2, [r7, #20]
  return result;
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e079      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	491a      	ldr	r1, [pc, #104]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fbd4 	bl	8001290 <HAL_GetTick>
 8002ae8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fbd0 	bl	8001290 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e061      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d214      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4906      	ldr	r1, [pc, #24]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_ClockConfig+0x25c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e040      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2de>
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	491a      	ldr	r1, [pc, #104]	; (8002bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4912      	ldr	r1, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b8a:	f000 f829 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b98:	22f0      	movs	r2, #240	; 0xf0
 8002b9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	fab2 f282 	clz	r2, r2
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	40d3      	lsrs	r3, r2
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x2ec>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_RCC_ClockConfig+0x2f0>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RCC_ClockConfig+0x2f4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fb22 	bl	8001208 <HAL_InitTick>
  
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3778      	adds	r7, #120	; 0x78
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08003fe4 	.word	0x08003fe4
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x30>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0e:	e03c      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c12:	623b      	str	r3, [r7, #32]
      break;
 8002c14:	e03c      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	607a      	str	r2, [r7, #4]
  return result;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	40d3      	lsrs	r3, r2
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	220f      	movs	r2, #15
 8002c44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	fa92 f2a2 	rbit	r2, r2
 8002c4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	40d3      	lsrs	r3, r2
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
 8002c78:	e004      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	623b      	str	r3, [r7, #32]
      break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c8c:	623b      	str	r3, [r7, #32]
      break;
 8002c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	372c      	adds	r7, #44	; 0x2c
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	08003ffc 	.word	0x08003ffc
 8002cac:	0800400c 	.word	0x0800400c
 8002cb0:	003d0900 	.word	0x003d0900

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cd2:	f7ff ffef 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ce0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ce4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	fa92 f2a2 	rbit	r2, r2
 8002cec:	603a      	str	r2, [r7, #0]
  return result;
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	40d3      	lsrs	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08003ff4 	.word	0x08003ff4

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d16:	f7ff ffcd 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	fa92 f2a2 	rbit	r2, r2
 8002d30:	603a      	str	r2, [r7, #0]
  return result;
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	40d3      	lsrs	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08003ff4 	.word	0x08003ff4

08002d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80cd 	beq.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10e      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a82      	ldr	r2, [pc, #520]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
 8002d90:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b7d      	ldr	r3, [pc, #500]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fa69 	bl	8001290 <HAL_GetTick>
 8002dbe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fa65 	bl	8001290 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0db      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de0:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d076      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2301      	movs	r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d045      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fa16 	bl	8001290 <HAL_GetTick>
 8002e64:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fa12 	bl	8001290 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e086      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61fb      	str	r3, [r7, #28]
  return result;
 8002e96:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	e007      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	613a      	str	r2, [r7, #16]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0bd      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4926      	ldr	r1, [pc, #152]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f023 0210 	bic.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	490b      	ldr	r1, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3748      	adds	r7, #72	; 0x48
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	10908100 	.word	0x10908100

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e049      	b.n	8003046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fe1c 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 fb16 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e040      	b.n	80030ea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x58>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d009      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x58>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_TIM_Base_Start_IT+0xac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x58>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_TIM_Base_Start_IT+0xb0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d115      	bne.n	80030d4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_TIM_Base_Start_IT+0xb4>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d015      	beq.n	80030e6 <HAL_TIM_Base_Start_IT+0x96>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d011      	beq.n	80030e6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	e008      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e000      	b.n	80030e8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40014000 	.word	0x40014000
 8003104:	00010007 	.word	0x00010007

08003108 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e097      	b.n	800324c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fcbb 	bl	8000aac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800314c:	f023 0307 	bic.w	r3, r3, #7
 8003150:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 fa57 	bl	8003610 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	4313      	orrs	r3, r2
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031a8:	f023 030c 	bic.w	r3, r3, #12
 80031ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	4313      	orrs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	011a      	lsls	r2, r3, #4
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	031b      	lsls	r3, r3, #12
 80031d8:	4313      	orrs	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	4313      	orrs	r3, r2
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003264:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800326c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003274:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d110      	bne.n	80032a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800328a:	7b7b      	ldrb	r3, [r7, #13]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e068      	b.n	8003366 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a4:	e031      	b.n	800330a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d110      	bne.n	80032ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ac:	7bbb      	ldrb	r3, [r7, #14]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d102      	bne.n	80032b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032b2:	7b3b      	ldrb	r3, [r7, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e054      	b.n	8003366 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	e01d      	b.n	800330a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d4:	7bbb      	ldrb	r3, [r7, #14]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032da:	7b7b      	ldrb	r3, [r7, #13]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e0:	7b3b      	ldrb	r3, [r7, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e03d      	b.n	8003366 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_TIM_Encoder_Start+0xc2>
 8003310:	2b04      	cmp	r3, #4
 8003312:	d008      	beq.n	8003326 <HAL_TIM_Encoder_Start+0xd2>
 8003314:	e00f      	b.n	8003336 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f9ee 	bl	8003700 <TIM_CCxChannelCmd>
      break;
 8003324:	e016      	b.n	8003354 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	2104      	movs	r1, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f9e6 	bl	8003700 <TIM_CCxChannelCmd>
      break;
 8003334:	e00e      	b.n	8003354 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f9de 	bl	8003700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	2104      	movs	r1, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f9d7 	bl	8003700 <TIM_CCxChannelCmd>
      break;
 8003352:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d122      	bne.n	80033ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d11b      	bne.n	80033ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0202 	mvn.w	r2, #2
 800339a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f90f 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f901 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f912 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d122      	bne.n	800341e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0204 	mvn.w	r2, #4
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8e5 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8d7 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8e8 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d122      	bne.n	8003472 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11b      	bne.n	8003472 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0208 	mvn.w	r2, #8
 8003442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8bb 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 800345e:	e005      	b.n	800346c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8ad 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8be 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d122      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d11b      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0210 	mvn.w	r2, #16
 8003496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2208      	movs	r2, #8
 800349c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f891 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 80034b2:	e005      	b.n	80034c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f883 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f894 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10e      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0201 	mvn.w	r2, #1
 80034ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f85d 	bl	80035ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d10e      	bne.n	800351e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d107      	bne.n	800351e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f98f 	bl	800383c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d10e      	bne.n	800354c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d107      	bne.n	800354c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f982 	bl	8003850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d107      	bne.n	8003578 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f842 	bl	80035fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d10e      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d107      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0220 	mvn.w	r2, #32
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f942 	bl	8003828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a32      	ldr	r2, [pc, #200]	; (80036ec <TIM_Base_SetConfig+0xdc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d007      	beq.n	8003638 <TIM_Base_SetConfig+0x28>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0x28>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <TIM_Base_SetConfig+0xe0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <TIM_Base_SetConfig+0xdc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <TIM_Base_SetConfig+0x6a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d00f      	beq.n	800367a <TIM_Base_SetConfig+0x6a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_Base_SetConfig+0xe0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x6a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <TIM_Base_SetConfig+0xe4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x6a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <TIM_Base_SetConfig+0xe8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x6a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_Base_SetConfig+0xec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <TIM_Base_SetConfig+0xdc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0xc0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <TIM_Base_SetConfig+0xe4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0xc0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <TIM_Base_SetConfig+0xe8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0xc0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <TIM_Base_SetConfig+0xec>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	615a      	str	r2, [r3, #20]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e054      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40014000 	.word	0x40014000

08003828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e040      	b.n	80038f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd f9e2 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8c0 	bl	8003a28 <UART_SetConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9ec 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fa73 	bl	8003ddc <UART_CheckIdleState>
 80038f6:	4603      	mov	r3, r0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003914:	2b20      	cmp	r3, #32
 8003916:	f040 8082 	bne.w	8003a1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_UART_Transmit+0x26>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07a      	b.n	8003a20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_UART_Transmit+0x38>
 8003934:	2302      	movs	r3, #2
 8003936:	e073      	b.n	8003a20 <HAL_UART_Transmit+0x120>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394e:	f7fd fc9f 	bl	8001290 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x80>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003990:	e02d      	b.n	80039ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa66 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e039      	b.n	8003a20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039be:	b292      	uxth	r2, r2
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e008      	b.n	80039dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b292      	uxth	r2, r2
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1cb      	bne.n	8003992 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa32 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e005      	b.n	8003a20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b8b      	ldr	r3, [pc, #556]	; (8003c80 <UART_SetConfig+0x258>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <UART_SetConfig+0x25c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d121      	bne.n	8003ae8 <UART_SetConfig+0xc0>
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <UART_SetConfig+0x260>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d817      	bhi.n	8003ae0 <UART_SetConfig+0xb8>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x90>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003ad5 	.word	0x08003ad5
 8003ac0:	08003adb 	.word	0x08003adb
 8003ac4:	08003acf 	.word	0x08003acf
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e01e      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e01b      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e018      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003ada:	2308      	movs	r3, #8
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e015      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	bf00      	nop
 8003ae6:	e011      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <UART_SetConfig+0x264>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d102      	bne.n	8003af8 <UART_SetConfig+0xd0>
 8003af2:	2300      	movs	r3, #0
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e009      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a64      	ldr	r2, [pc, #400]	; (8003c90 <UART_SetConfig+0x268>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d102      	bne.n	8003b08 <UART_SetConfig+0xe0>
 8003b02:	2300      	movs	r3, #0
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e001      	b.n	8003b0c <UART_SetConfig+0xe4>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d15c      	bne.n	8003bd0 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003b16:	7ffb      	ldrb	r3, [r7, #31]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d828      	bhi.n	8003b6e <UART_SetConfig+0x146>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0xfc>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b6f 	.word	0x08003b6f
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b6f 	.word	0x08003b6f
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7ff f8c0 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e013      	b.n	8003b78 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7ff f8de 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61b8      	str	r0, [r7, #24]
        break;
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <UART_SetConfig+0x26c>)
 8003b5a:	61bb      	str	r3, [r7, #24]
        break;
 8003b5c:	e00c      	b.n	8003b78 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7ff f83f 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003b62:	61b8      	str	r0, [r7, #24]
        break;
 8003b64:	e008      	b.n	8003b78 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e004      	b.n	8003b78 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77bb      	strb	r3, [r7, #30]
        break;
 8003b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d074      	beq.n	8003c68 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	005a      	lsls	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d916      	bls.n	8003bca <UART_SetConfig+0x1a2>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba2:	d212      	bcs.n	8003bca <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	89fa      	ldrh	r2, [r7, #14]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e04e      	b.n	8003c68 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	77bb      	strb	r3, [r7, #30]
 8003bce:	e04b      	b.n	8003c68 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d827      	bhi.n	8003c26 <UART_SetConfig+0x1fe>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0x1b4>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c11 	.word	0x08003c11
 8003be8:	08003c27 	.word	0x08003c27
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7ff f864 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003c04:	61b8      	str	r0, [r7, #24]
        break;
 8003c06:	e013      	b.n	8003c30 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff f882 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	61b8      	str	r0, [r7, #24]
        break;
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <UART_SetConfig+0x26c>)
 8003c12:	61bb      	str	r3, [r7, #24]
        break;
 8003c14:	e00c      	b.n	8003c30 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7fe ffe3 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003c1a:	61b8      	str	r0, [r7, #24]
        break;
 8003c1c:	e008      	b.n	8003c30 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e004      	b.n	8003c30 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d018      	beq.n	8003c68 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	085a      	lsrs	r2, r3, #1
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	441a      	add	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d908      	bls.n	8003c64 <UART_SetConfig+0x23c>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d204      	bcs.n	8003c64 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e001      	b.n	8003c68 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	efff69f3 	.word	0xefff69f3
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40004800 	.word	0x40004800
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fd fa50 	bl	8001290 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d10e      	bne.n	8003e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f82d 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e023      	b.n	8003e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d10e      	bne.n	8003e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f817 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00d      	b.n	8003e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	e05e      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d05a      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e88:	f7fd fa02 	bl	8001290 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11b      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e043      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02c      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef2:	d124      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e00f      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d091      	beq.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4e0d      	ldr	r6, [pc, #52]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6c:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f6e:	1ba4      	subs	r4, r4, r6
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	2500      	movs	r5, #0
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	4e0b      	ldr	r6, [pc, #44]	; (8003fa8 <__libc_init_array+0x40>)
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	; (8003fac <__libc_init_array+0x44>)
 8003f7c:	f000 f820 	bl	8003fc0 <_init>
 8003f80:	1ba4      	subs	r4, r4, r6
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	2500      	movs	r5, #0
 8003f86:	42a5      	cmp	r5, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f90:	4798      	blx	r3
 8003f92:	3501      	adds	r5, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f9a:	4798      	blx	r3
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	0800401c 	.word	0x0800401c
 8003fa4:	0800401c 	.word	0x0800401c
 8003fa8:	0800401c 	.word	0x0800401c
 8003fac:	08004020 	.word	0x08004020

08003fb0 <memset>:
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
